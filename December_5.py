# Overview:
#   - repurpose workhorse function from Day 2
#   - create one new function to process parameter modes.

#  a function to solve the intcode program
#     This is based on the solution to day 2, but with additional op_codes accepted, and parameter mode support.
#     Needed to change to a while loop since parameter number is now no longer consistently 4.
def test_op(op, input_n):
    i = 0
    output_n = 0
    while i < len(op):
        # Parsing instructions
        if op[i] > 100:
            op_code = op[i] % 100
            par_instr = [int(x) for x in str(op[i])[:-2]]
            par_instr = [0] * (3-len(par_instr)) + par_instr
        else:
            op_code = op[i]
            par_instr = [0, 0, 0]
        # Program end, multiplication and addition instructions (from Day 2)
        if op_code == 99:
            break
        elif op_code == 1:
            op[op[i + 3]] = par_mode(par_instr[2], op, op[i + 1]) + par_mode(par_instr[1], op, op[i + 2])
            i += 4
        elif op_code == 2:
            op[op[i + 3]] = par_mode(par_instr[2], op, op[i + 1]) * par_mode(par_instr[1], op, op[i + 2])
            i += 4
        # Input/Output instructions
        elif op_code == 3:
            op[op[i + 1]] = input_n
            i += 2
        elif op_code == 4:
            output_n = par_mode(par_instr[2], op, op[i + 1])
            i += 2
        # Jump if TRUE/Jump FALSE
        elif op_code == 5:
            if (par_mode(par_instr[2], op, op[i + 1]) != 0):
                i = par_mode(par_instr[1], op, op[i + 2])
            else:
                i += 3
        elif op_code == 6:
            if (par_mode(par_instr[2], op, op[i + 1]) == 0):
                i = par_mode(par_instr[1], op, op[i + 2])
            else:
                i += 3
        # Less than / Equal to
        elif op_code == 7:
            if (par_mode(par_instr[2], op, op[i + 1]) < par_mode(par_instr[1], op, op[i + 2])):
                op[op[i + 3]] = 1
            else:
                op[op[i + 3]] = 0
            i +=4
        elif op_code == 8:
            if (par_mode(par_instr[2], op, op[i + 1]) == par_mode(par_instr[1], op, op[i + 2])):
                op[op[i + 3]] = 1
            else:
                op[op[i + 3]] = 0
            i +=4
        # For error checking
        else:
            print("problem encountered at position ", i)
            break
 
    return("Output is", output_n)

# A function interpret parameter mode and return the appropriate value
def par_mode(instr, whole_op, para):
    if instr == 1:
        return(para)
    else:
        return(whole_op[para])

# Input and output of puzzle
op_input = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,68,5,225,1101,71,12,225,1,117,166,224,1001,224,-100,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1001,66,36,224,101,-87,224,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1101,26,51,225,1102,11,61,224,1001,224,-671,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,1101,59,77,224,101,-136,224,224,4,224,1002,223,8,223,1001,224,1,224,1,223,224,223,1101,11,36,225,1102,31,16,225,102,24,217,224,1001,224,-1656,224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,101,60,169,224,1001,224,-147,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1102,38,69,225,1101,87,42,225,2,17,14,224,101,-355,224,224,4,224,102,8,223,223,1001,224,2,224,1,224,223,223,1002,113,89,224,101,-979,224,224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1102,69,59,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,677,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,344,1001,223,1,223,1108,226,677,224,102,2,223,223,1005,224,359,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,389,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,404,101,1,223,223,1008,677,226,224,102,2,223,223,1005,224,419,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,434,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,449,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,464,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,677,224,102,2,223,223,1006,224,494,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,509,101,1,223,223,108,677,677,224,102,2,223,223,1006,224,524,1001,223,1,223,8,226,677,224,102,2,223,223,1005,224,539,101,1,223,223,107,677,226,224,102,2,223,223,1005,224,554,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,569,1001,223,1,223,7,677,226,224,1002,223,2,223,1005,224,584,1001,223,1,223,1108,226,226,224,102,2,223,223,1005,224,599,1001,223,1,223,1107,677,677,224,1002,223,2,223,1006,224,614,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,108,226,226,224,102,2,223,223,1005,224,644,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,659,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226]
print(test_op(op_input, 5))